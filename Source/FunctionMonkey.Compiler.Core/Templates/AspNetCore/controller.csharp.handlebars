using System;
using System.Threading;
using System.Threading.Tasks;
using AzureFromTheTrenches.Commanding.Abstractions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using FunctionMonkey.Abstractions;
using System.Collections.Generic;
{{#if ValidatesToken}}
using Microsoft.AspNetCore.Authorization;
{{/if}}

namespace {{{Namespace}}}
{
{{#if ValidatesToken}}
    [Authorize]
{{/if}}
    [ApiController]
    public class {{{Name}}}Controller : ControllerBase
    {
        private readonly IMediatorDecorator _dispatcher;
        private readonly IContextSetter _contextSetter;

        public {{{Name}}}Controller(IMediatorDecorator dispatcher, IContextSetter contextSetter)
        {
            _dispatcher = dispatcher;
            _contextSetter = contextSetter;
        }

        [Route("{{#if HasRoute}}{{Route}}{{else}}{{Name}}{{/if}}")]
        {{{httpVerbs}}}
        {{#if CommandHasResult}}
        public async Task<IActionResult> Handler(
        {{else}}
        public async Task<IActionResult> Handler(
        {{/if}}
        {{#if IsBodyBased}}
            {{#if CommandRequiresBody}}
            [FromBody]{{{CommandTypeName}}} command
            {{/if}}
            {{#if HasRouteParameters}},{{/if}}
            {{#each RouteParameters}}
                {{#if @index}},{{/if}} [FromRoute]{{{TypeName}}} {{{Name}}}
            {{/each}}
        {{else}}
            // need to get query parameters
            {{#each QueryParametersWithoutHeaderMapping}}
                {{#if @index}},{{/if}}[FromQuery(Name="{{{Name}}}")]{{{TypeName}}} {{{Name}}}
            {{/each}}
            {{#if HasQueryParametersWithoutHeaderMappingAndRouteParameters}},{{/if}}
            {{#each RouteParameters}}
                {{#if @index}},{{/if}} [FromRoute]{{{TypeName}}} {{{Name}}}
            {{/each}}
        {{/if}}
        {{#if HeaderBindingConfiguration}}
            {{{optionalCommaBeforeHeaderMapping}}}
            {{#each QueryParametersWithHeaderMapping}}
                {{#if @index}},{{/if}}[FromHeader(Name="{{{mappedHeaderNameForProperty ../HeaderBindingConfiguration}}}")]{{{TypeName}}} header{{{@index}}}
            {{/each}}
        {{/if}}
        )
        {
            HttpRequest req = Request;
            string requestUrl = GetRequestUrl(req);
            FunctionMonkey.PluginFunctions pluginFunctions = FunctionMonkey.Runtime.PluginFunctions["{{Name}}"];

            // set the execution context
            _contextSetter.SetExecutionContext(GetType().Assembly.Location,
                GetType().Assembly.Location,
                "{{{Name}}}",
                Guid.NewGuid());
            var headerDictionary = new Dictionary<string, IReadOnlyCollection<string>>();
            foreach (var headerKeyValuesPair in req.Headers)
            {
                string[] values = headerKeyValuesPair.Value.ToArray();
                headerDictionary.Add(headerKeyValuesPair.Key, values);
            }
            _contextSetter.SetHttpContext(User, requestUrl, headerDictionary);
            
            {{#if AuthorizesClaims}}
                var claimsPrincipalAuthorizationResult = await pluginFunctions.IsAuthorized(User, req.Method, requestUrl);
                if (!claimsPrincipalAuthorizationResult)
                {
                return new UnauthorizedResult();
                }
            {{/if}}

            // complete model binding of the command
            {{#if IsBodyBased}}
                {{#unless CommandRequiresBody}}
                    {{{CommandTypeName}}} command = CreateNewCommand();
                {{/unless}}
            {{else}}
            {{{CommandTypeName}}} command = CreateNewCommand();
            {{#each QueryParametersWithoutHeaderMapping}}
                command.{{{Name}}} = {{{Name}}};
            {{/each}}
            {{/if}}

            {{#each RouteParameters}}
                command.{{{Name}}} = {{{Name}}};
            {{/each}}

            {{#if HeaderBindingConfiguration}}
                {{#each QueryParametersWithHeaderMapping}}
                    command.{{{Name}}} = header{{{@index}}};
                {{/each}}
            {{/if}}
            
            // Claims bindings
            {{#if ValidatesToken}}
                {{#unless CommandTypeIsUnit}}
                    command = ({{{CommandTypeName}}})(await pluginFunctions.BindClaims(User, command));
                {{/unless}}
            {{/if}}
            
            // Validate
            {{#if IsUsingValidator}}
            {{#unless CommandTypeIsUnit}}
            var validationResult = pluginFunctions.Validate(command);
            if (!pluginFunctions.IsValid(validationResult))
            {
                {{#if HasHttpResponseHandler}}
                    var validatorResponseTask = pluginFunctions.CreateValidationFailureResponse(command, validationResult);
                    var handledValidationResponse = validatorResponseTask != null ? (await validatorResponseTask) : null;
                    return handledValidationResponse ?? CreateResponse(400, validationResult, pluginFunctions);
                {{else}}
                    return CreateResponse(400, validationResult, pluginFunctions);
                {{/if}}
            }
            {{/unless}}
            {{/if}}
            

            {{#if CommandHasResult}}
            {{{CommandResultTypeName}}} result = (await _dispatcher.RequestAsync<{{{CommandResultTypeName}}}>(command, CancellationToken.None));
            {{else}}
            await _dispatcher.SendAsync(command, CancellationToken.None);
            {{/if}}

            {{#if CommandHasResult}}
                {{#if HasHttpResponseHandler}}
                    {{#if IsValidationResult}}
                        FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult validationResult = (FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult)result;
                        if (!validationResult.IsValid)
                        {
                            var validatorResponseTask = pluginFunctions.CreateValidationFailureResponse(command, validationResult);
                            var handledValidationResponse = validatorResponseTask != null ? (await responseTask) : null;
                            return handledValidationResponse ?? CreateResponse(400, validationResult, pluginFunctions);
                        }
                        else
                        {
                            var responseTask = pluginFunctions.CreateResponseForResult(command, result);
                            var handledResponse = responseTask != null ? (await responseTask) : null;
                            return handledResponse ?? CreateResponse(200, result, pluginFunctions);
                        }
                    {{else}}
                        var responseTask = pluginFunctions.CreateResponseForResult(command, result);
                        var handledResponse = responseTask != null ? (await responseTask) : null;
                        return handledResponse ?? {{#if ResultIsFSharpUnit}}new OkResult(){{else}}CreateResponse(200, result, pluginFunctions){{/if}};
                    {{/if}}                        
                {{else}}
                    {{#if IsValidationResult}}
                        FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult validationResult = (FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult)result;
                        if (!validationResult.IsValid)
                        {
                            return CreateResponse(400, validationResult, pluginFunctions);
                        }
                    {{/if}}
                    return {{#if ResultIsFSharpUnit}}new OkResult(){{else}}CreateResponse(200, result, pluginFunctions){{/if}};
                {{/if}}
            {{else}}
                // We don't need to cover this branch for F# as all handlers have results
                {{#if HasHttpResponseHandler}}
                    var responseTask = pluginFunctions.CreateResponse(command);
                    var handledResponse = responseTask != null ? (await responseTask) : null; 
                    return handledResponse ?? new OkResult();
                {{else}}
                    return new OkResult();
                {{/if}}
            {{/if}}
        }

        private static {{{CommandTypeName}}} CreateNewCommand()
        {
            {{#if UsesImmutableTypes}}
                {{#if CommandTypeIsUnit}}
                    return null;
                {{else}}    
                return new {{{CommandTypeName}}}(
                    {{#each ImmutableTypeConstructorParameters}}
                        {{#if IsFSharpOptionType}}
                            Microsoft.FSharp.Core.FSharpOption<{{{FSharpOptionInnerTypeName}}}>.None
                        {{else}}
                            default({{{TypeName}}})
                        {{/if}}
                        {{#unless @last}},{{/unless}}
                    {{/each}}
                );
                {{/if}}    
            {{else}}
                return new {{{CommandTypeName}}}();
            {{/if}}
        }

        public static IActionResult CreateResponse(int code, object content, FunctionMonkey.PluginFunctions pluginFunctions)
        {
            ContentResult result = new ContentResult();
            result.Content = pluginFunctions.Serialize(content, true);
            result.ContentType = "application/json";
            result.StatusCode = code;
            return result;
        }

        private static string GetRequestUrl(HttpRequest request)
        {
            string str1 = request.Host.Value;
            string str2 = request.PathBase.Value;
            string str3 = request.Path.Value;
            string str4 = request.QueryString.Value;
            return new System.Text.StringBuilder(request.Scheme.Length + "://".Length + str1.Length + str2.Length + str3.Length + str4.Length).Append(request.Scheme).Append("://").Append(str1).Append(str2).Append(str3).Append(str4).ToString();
        }
    }
}
