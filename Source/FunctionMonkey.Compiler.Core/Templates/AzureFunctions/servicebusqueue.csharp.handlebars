using System;
using Microsoft.Azure.ServiceBus;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;

namespace {{Namespace}}
{
    public class {{Name}}
    {
        public {{Name}}(IServiceProvider serviceProvider)
        {
            FunctionMonkey.Runtime.FunctionServiceProvider.Value = serviceProvider;
        }

        [FunctionName("{{Name}}")]
        public async Task Run(
            [ServiceBusTrigger("{{QueueName}}", Connection="{{ConnectionStringName}}"{{#if IsSessionEnabled}}, IsSessionsEnabled=true{{/if}})]
            Message queueItem,
            int deliveryCount,
            DateTime enqueuedTimeUtc,
            string messageId,
            ILogger log,
            System.Threading.CancellationToken cancellationToken,
            ExecutionContext executionContext
            {{{parameterOutputBinding}}}
        )
        {
            log.LogInformation("Service bus queue trigger function {{Name}} processed a request.");
            FunctionMonkey.Runtime.FunctionProvidedLogger.Value = log;
            FunctionMonkey.PluginFunctions pluginFunctions = FunctionMonkey.Runtime.PluginFunctions["{{Name}}"];

            string body = System.Text.Encoding.UTF8.GetString(queueItem.Body);
            {{{CommandTypeName}}} command;
            if (!System.String.IsNullOrWhiteSpace(body))
            {
                command = ({{{CommandTypeName}}})pluginFunctions.Deserialize(body, false); // we don't enforce security properties from message buses 
            }
            else
            {
                command = CreateNewCommand();
            }

            var contextSetter = (FunctionMonkey.Abstractions.IContextSetter)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.IContextSetter));
            contextSetter.SetServiceBusContext(deliveryCount, enqueuedTimeUtc, messageId, queueItem.SystemProperties.LockToken);
            contextSetter.SetExecutionContext(executionContext.FunctionDirectory,
                executionContext.FunctionAppDirectory,
                executionContext.FunctionName,
                executionContext.InvocationId);

            {{#if IsUsingValidator}}
            {{#unless CommandTypeIsUnit}}
            var validationResult = pluginFunctions.Validate(command);
            if (!pluginFunctions.IsValid(validationResult))
            {
            {{#if IsFunctionalFunction}}
                throw new FunctionMonkey.Commanding.Abstractions.Validation.ValidationObjectException("{{Name}}", validationResult);
            {{else}}
                throw new FunctionMonkey.Commanding.Abstractions.Validation.ValidationException(
                    "{{Name}}",
                    (FunctionMonkey.Commanding.Abstractions.Validation.ValidationResult) validationResult);
            {{/if}}
            }
            {{/unless}}
            {{/if}}
            
            {{#if OutputBinding}}
                {{#if NoCommandHandler}}
                    {{{CommandType}}} result = command;
                {{else}}
                    {{#if IsFunctionalFunction}}
                        Func<{{{CommandTypeName}}}, Task<{{{CommandResultTypeName}}}>> handler = (Func<{{{CommandTypeName}}}, Task<{{{CommandResultTypeName}}}>>)pluginFunctions.Handler;
                        {{#if FunctionHandlerIsAsync}}
                            var result = await handler(command);
                        {{else}}
                            var result = handler(command);
                        {{/if}}
                    {{else}}
                        {{{CommandResultTypeName}}} result = await FunctionMonkey.Runtime.Mediator.RequestAsync<{{{CommandResultTypeName}}}>(command, cancellationToken);
                    {{/if}}
                {{/if}}
                {{{collectorOutputBinding}}}
            {{else}}
                {{#if IsFunctionalFunction}}
                    Func<{{{CommandTypeName}}}, Task<{{{CommandResultTypeName}}}>> handler = (Func<{{{CommandTypeName}}}, Task<{{{CommandResultTypeName}}}>>)pluginFunctions.Handler;
                    {{#if FunctionHandlerIsAsync}}
                        await handler(command);
                    {{else}}
                        handler(command);
                    {{/if}}
                {{else}}
                    await FunctionMonkey.Runtime.Mediator.SendAsync(command, cancellationToken);
                {{/if}}
            {{/if}}
        }

        private static {{{CommandTypeName}}} CreateNewCommand()
        {
        {{#if UsesImmutableTypes}}
            {{#if CommandTypeIsUnit}}
                return null;
            {{else}}
                return new {{{CommandTypeName}}}(
                {{#each ImmutableTypeConstructorParameters}}
                    {{#if IsFSharpOptionType}}
                        Microsoft.FSharp.Core.FSharpOption<{{{FSharpOptionInnerTypeName}}}>.None
                    {{else}}
                        default({{{TypeName}}})
                    {{/if}}
                    {{#unless @last}},{{/unless}}
                {{/each}}
                );
            {{/if}}
        {{else}}
            return new {{{CommandTypeName}}}();
        {{/if}}
        }
    }
}
